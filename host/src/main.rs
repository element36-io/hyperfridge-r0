
// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use methods::{
    HYPERFRIDGE_ELF, HYPERFRIDGE_ID // TODO: does not work, why? HYPERFRIDGE_ID
};
use risc0_zkvm::{default_prover, ExecutorEnv};
use pem::parse;
use rsa::RsaPublicKey; 
use rsa::pkcs8::DecodePublicKey;
use rsa::traits::PublicKeyParts;

macro_rules! include_resource {
    ($file:expr) => {
        include_str!(concat!("../../data/test/test.xml-", $file))
    };
}

const SIGNED_INFO_XML_C14N: &str = include_resource!("SignedInfo");
const AUTHENTICATED_XML_C14N: &str = include_resource!("authenticated");
const SIGNATURE_VALUE_XML: &str = include_resource!("SignatureValue");
const ORDER_DATA_XML: &str = include_resource!("OrderData");
const BANK_PUBLIC_KEY_X002_PEM: &str = include_str!("../../data/bank_public.pem");
const USER_PRIVATE_KEY_E002_PEM: &str = include_str!("../../data/client.pem");
 


// #[cfg(not(feature = "debug_mode"))]

risc0_zkvm::guest::entry!(main);

use chrono::Local;

fn main() {

    println!("start: {}", Local::now().format("%Y-%m-%d %H:%M:%S"));
    let _=proove_camt53();
    println!("end: {}", Local::now().format("%Y-%m-%d %H:%M:%S"));
}

fn proove_camt53() -> String {
    env_logger::init();

    // Using crypto-bigint does not work with RsaPUblicKey

    // let exp_bigint = BigInt::from_str_radix(&BANK_X002_EXP, 10)
    // .expect("error parsing EXP of public bank key");
    // let modu_bigint = BigInt::from_str_radix(&BANK_X002_MOD, 10)
    // .expect("error parsing MODULUS of public bank key");

    // let exp_hex = format!("{:x}", exp_bigint);
    // let modu_hex = format!("{:x}", modu_bigint);

    // .write(&exp_hex).unwrap()
    // .write(&modu_hex).unwrap()

    // https://docs.rs/risc0-zkvm/latest/risc0_zkvm/struct.ExecutorEnvBuilder.html
    println!("Starting guest code, load environment");

    let pem = parse(BANK_PUBLIC_KEY_X002_PEM).expect("Failed to parse bank public key PEM");
    let bank_public_key = RsaPublicKey::from_public_key_pem(&pem::encode(&pem)).expect("Failed to create bank public key");
    let modulus_str = bank_public_key.n().to_str_radix(10);
    let exponent_str = bank_public_key.e().to_str_radix(10);

    let env = ExecutorEnv::builder()
        .write(&SIGNED_INFO_XML_C14N).unwrap()
        .write(&AUTHENTICATED_XML_C14N).unwrap()
        .write(&SIGNATURE_VALUE_XML).unwrap()
        .write(&ORDER_DATA_XML).unwrap()
        .write(&modulus_str).unwrap()
        .write(&exponent_str).unwrap()
        .write(&USER_PRIVATE_KEY_E002_PEM).unwrap()
        .build().unwrap();

    // Obtain the default prover.
    let prover = default_prover();
    println!("prove hyperfridge elf"); 
    let receipt_result = prover.prove_elf(env, HYPERFRIDGE_ELF);
    println!("got the receipt of the prove ");
    // println!("----- got result {} ",receipt_result);

    let mut result=String::new();
     match &receipt_result {
        Ok(_val) => {
            // println!("Receipt result: {}", val);_
            let receipt = receipt_result.unwrap();
            println!("verify receipt: ");
            let _=receipt.verify(HYPERFRIDGE_ID).expect("verify failed");
            let journal= receipt.journal;
            result=journal.decode::<String>().unwrap();
            println!("Receipt result - balance information {}", result);
            

            //println!("Receipt result: {:?}", receipt.journal.decode().unwrap());

        },
        Err(e) => {
            println!("Receipt error: {:?}", e);
            //None
        },
    }

    result
    // 31709.14

}


#[cfg(test)]
mod tests {
    use crate::{proove_camt53};
    #[test]
    fn do_main() {
       
        assert_eq!(proove_camt53(),"31709.14");
        // let data = include_str!("../res/example.json");
        // let outputs = super::search_json(data);
        // assert_eq!(
        //     outputs.data, 47,
        //     "Did not find the expected value in the critical_data field"
        // );
    }
}



// fn main() {
//         // Initialize tracing. In order to view logs, run `RUST_LOG=info cargo run`
//         env_logger::init();
    
//         // An executor environment describes the configurations for the zkVM
//         // including program inputs.
//         // An default ExecutorEnv can be created like so:
//         // `let env = ExecutorEnv::builder().build().unwrap();`
//         // However, this `env` does not have any inputs.
//         //
//         // To add add guest input to the executor environment, use
//         // ExecutorEnvBuilder::write().
//         // To access this method, you'll need to use ExecutorEnv::builder(), which
//         // creates an ExecutorEnvBuilder. When you're done adding input, call
//         // ExecutorEnvBuilder::build().
    
//         // For example:
//         let input: u32 = 15*2^27 + 1;
//         let env = ExecutorEnv::builder().write(&input).unwrap().build().unwrap();
    
//         // Obtain the default prover.
//         let prover = default_prover();
    
//         // Produce a receipt by proving the specified ELF binary.
//         let receipt = prover.prove_elf(env, HYPERFRIDGE_ELF).unwrap();
    
//         // TODO: Implement code for retrieving receipt journal here.
    
//         // For example:
//         let _output: u32 = receipt.journal.decode().unwrap();
    
//         // Optional: Verify receipt to confirm that recipients will also be able to
//         // verify your receipt
//         receipt.verify(HYPERFRIDGE_ID).unwrap();
//     }